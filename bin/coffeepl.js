// Generated by CoffeeScript 1.3.1
(function() {
  var coffeePL, _root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  this.console = console;

  _root = this;

  if (typeof window !== "undefined" && window !== null) {
    window.coffeePL = {};
    coffeePL = window.coffeePL;
  } else {
    coffeePL = this;
  }

  coffeePL.globals = {
    debugEnabled: false
  };

  coffeePL.DefaultLogger = (function() {

    DefaultLogger.name = 'DefaultLogger';

    function DefaultLogger(name, options) {
      this.name = name;
      this.debugEnabled = (options != null ? options.debugEnabled : void 0) ? true : false;
    }

    DefaultLogger.prototype.debug = function(msg) {
      var console;
      console = _root.console;
      if (console == null) {
        console = {};
      }
      if (console.debug == null) {
        console.debug = function(msg) {};
      }
      return console.debug(this.name, msg);
    };

    return DefaultLogger;

  })();

  coffeePL.LoggerFactory = (function() {

    LoggerFactory.name = 'LoggerFactory';

    function LoggerFactory(loggerClass, options) {
      this.loggerClass = loggerClass;
      this.options = options != null ? options : {};
    }

    LoggerFactory.prototype.getLogger = function(name) {
      return new this.loggerClass(name, this.options);
    };

    return LoggerFactory;

  })();

  coffeePL.loggerFactory = new coffeePL.LoggerFactory(coffeePL.DefaultLogger, coffeePL.globals);

  coffeePL.Template = (function() {

    Template.name = 'Template';

    function Template(config, blocks, renderFunction) {
      this.config = config;
      this.blocks = blocks;
      this.renderFunction = renderFunction;
    }

    Template.prototype.argsts = function(args) {
      var val;
      return val = this.config.argsAdapter.toStr(args);
    };

    Template.prototype.argsfs = function(args) {
      var val;
      return val = this.config.argsAdapter.fromStr(args);
    };

    Template.prototype.include = function(blockId, parameters) {
      var block, result;
      if (!(this.blocks[blockId] != null)) {
        throw new Error("The block " + blockId + " does not exists");
      }
      block = this.blocks[blockId];
      if (parameters == null) {
        parameters = {};
      }
      parameters.parentTemplate = this;
      result = block.render(parameters, this);
      return result;
    };

    Template.prototype.render = function(parameters, parentTemplate) {
      var buffer, res, write;
      if (parameters == null) {
        parameters = {};
      }
      buffer = [];
      write = function(data) {
        return buffer.push(data);
      };
      this.renderFunction(this, write, parameters, parentTemplate);
      res = buffer.join('');
      return res;
    };

    return Template;

  })();

  coffeePL.Delimiter = (function() {

    Delimiter.name = 'Delimiter';

    function Delimiter(delimiter) {
      this.delimiter = delimiter.replace(/[-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
      this.len = delimiter.length;
    }

    Delimiter.prototype.match = function(data, modifiers) {
      var re, rs;
      re = new RegExp(this.delimiter, modifiers);
      rs = data.match(re);
      return rs;
    };

    Delimiter.prototype.search = function(data, modifiers) {
      var re, rs;
      re = new RegExp(this.delimiter, modifiers);
      rs = data.search(re);
      return rs;
    };

    return Delimiter;

  })();

  coffeePL.ArgsAdapter = (function() {

    ArgsAdapter.name = 'ArgsAdapter';

    function ArgsAdapter() {}

    ArgsAdapter.prototype.fromStr = function(argStr) {
      throw new Error("Not Implemented");
    };

    ArgsAdapter.prototype.toStr = function(args) {
      throw new Error("Not Implemented");
    };

    return ArgsAdapter;

  })();

  coffeePL.URLEncodedArgsAdapter = (function(_super) {

    __extends(URLEncodedArgsAdapter, _super);

    URLEncodedArgsAdapter.name = 'URLEncodedArgsAdapter';

    function URLEncodedArgsAdapter(fnToJSON, fnFromJSON) {
      this.fnToJSON = fnToJSON;
      this.fnFromJSON = fnFromJSON;
    }

    URLEncodedArgsAdapter.prototype.fromStr = function(argStr) {
      var val;
      val = decodeURIComponent(argsStr);
      val = this.fnFromJSON(val);
      return val;
    };

    URLEncodedArgsAdapter.prototype.toStr = function(args) {
      var val;
      val = this.fnToJSON(args);
      val = encodeURIComponent(val);
      return val;
    };

    return URLEncodedArgsAdapter;

  })(coffeePL.ArgsAdapter);

  coffeePL.Options = (function() {

    Options.name = 'Options';

    function Options() {
      this.beginOpenBlock = '<!-- {';
      this.endOpenBlock = '} -->';
      this.validBlockName = /([\w]+)/;
      this.closeBlock = function(blockName) {
        return "<!-- {/" + blockName + "} -->";
      };
      this.beginCode = '<!-- @';
      this.endCode = '@ -->';
      this.beginResultCode = '${';
      this.endResultCode = '}$';
      this.writeVar = '_write_';
      this.codeContent = function(content) {
        content = content.replace(/(^(\r\n|\r|\n)|(\r\n|\r|\n)$)/mg, '');
        return content;
      };
      this.argsAdapter = new coffeePL.ArgsAdapter;
    }

    return Options;

  })();

  coffeePL.Config = (function() {

    Config.name = 'Config';

    function Config(options) {
      this.beginOpenBlock = new coffeePL.Delimiter(options.beginOpenBlock);
      this.endOpenBlock = new coffeePL.Delimiter(options.endOpenBlock);
      this.validBlockName = options.validBlockName;
      this.closeBlock = options.closeBlock;
      this.beginCode = new coffeePL.Delimiter(options.beginCode);
      this.endCode = new coffeePL.Delimiter(options.endCode);
      this.beginResultCode = new coffeePL.Delimiter(options.beginResultCode);
      this.endResultCode = new coffeePL.Delimiter(options.endResultCode);
      this.writeVar = options.writeVar;
      this.codeContent = options.codeContent;
      this.argsAdaptor = options.argsAdapter;
    }

    return Config;

  })();

  coffeePL.CoffeePL = (function() {

    CoffeePL.name = 'CoffeePL';

    function CoffeePL(config) {
      this.config = config != null ? config : new coffeePL.Config(new coffeePL.Options);
    }

    CoffeePL.prototype.createParser = function(src, inheritedVariables) {
      return new coffeePL.Parser(this.config, src, inheritedVariables);
    };

    return CoffeePL;

  })();

  coffeePL.Parser = (function() {

    Parser.name = 'Parser';

    function Parser(config, inheritedVariables) {
      this.config = config;
      this.inheritedVariables = inheritedVariables;
      this.template = null;
      this.logger = coffeePL.loggerFactory.getLogger("coffeePL.Parser");
      this.src = null;
    }

    Parser.prototype._parseBlock = function(beginOpenBlockPos, blocks) {
      var blockName, blockParser, blockTemplate, content, endBlockDelimiter, endOpenBlockPos, endPos, tmp;
      endOpenBlockPos = this.config.endOpenBlock.search(this.src);
      if (endOpenBlockPos < 0) {
        throw new Error("The begin of block in " + beginOpenBlockPos + " position does not ends.");
      } else if (endOpenBlockPos <= this.config.beginOpenBlock.len) {
        throw new Error("The end of begin block in " + beginOpenBlockPos + " position is invalid.");
      }
      blockName = this.src.substring(beginOpenBlockPos + this.config.beginOpenBlock.len, endOpenBlockPos);
      if (!this.config.validBlockName.test(blockName)) {
        throw new Error("The block name '" + blockName + "' is invalid.");
      }
      endBlockDelimiter = new coffeePL.Delimiter(this.config.closeBlock(blockName));
      endPos = endBlockDelimiter.search(this.src);
      if (endPos < 0) {
        throw new Error("The block '" + blockName + "' does not ends.");
      }
      content = this.src.substring(endOpenBlockPos + this.config.endOpenBlock.len, endPos);
      content = this.config.codeContent(content);
      tmp = this.config.codeContent(this.src.substring(0, beginOpenBlockPos));
      tmp += this.src.substring(endPos + endBlockDelimiter.len);
      this.src = tmp;
      tmp = null;
      blockParser = new coffeePL.Parser(this.config, this.inheritedVariables);
      blockTemplate = blockParser.parse(content);
      blocks[blockName] = blockTemplate;
      return true;
    };

    Parser.prototype._codeId = function(i) {
      return "_~~{{~~{{~~_" + i + "_~~}}~~}}~~_";
    };

    Parser.prototype._parseCode = function(startPos, codes, i) {
      var content, endPos, tmp;
      endPos = this.config.endCode.search(this.src);
      if (endPos < 0) {
        throw new Error("The code '" + i + "', on " + startPos + " position does not ends.");
      }
      if (endPos <= startPos) {
        throw new Error("Ends of result code block '" + i + "', in " + endPos + " does not be valid.");
      }
      content = this.src.substring(startPos + this.config.beginCode.len, endPos);
      tmp = this.config.codeContent(this.src.substring(0, startPos));
      tmp += this._codeId(i);
      tmp += this.src.substring(endPos + this.config.endCode.len);
      this.src = tmp;
      tmp = null;
      codes[i] = content;
      return true;
    };

    Parser.prototype._codeReturnId = function(i) {
      return "_~~{{~~{{~~~~_" + i + "_~~~~}}~~}}~~_";
    };

    Parser.prototype._parseCodeReturn = function(startPos, codes, i) {
      var content, endPos, tmp;
      endPos = this.config.endResultCode.search(this.src);
      if (endPos < 0) {
        throw new Error("The result code block '" + i + "', in " + startPos + " position doe not ends.");
      }
      if (endPos <= startPos) {
        throw new Error("Ends of result code block '" + i + "', in " + endPos + " does not be valid.");
      }
      content = this.src.substring(startPos + this.config.beginResultCode.len, endPos);
      tmp = this.src.substring(0, startPos);
      tmp += this._codeReturnId(i);
      tmp += this.src.substring(endPos + this.config.beginResultCode.len);
      this.src = tmp;
      tmp = null;
      codes[i] = content;
      return true;
    };

    Parser.prototype.parse = function(src) {
      var blockPos, blocks, codeReturns, codes, i, k, k2, r, render, renderSource, replaces, s, startPos, template, v, v2, wv, _i, _len, _ref;
      this.src = src;
      blocks = {};
      wv = this.config.writeVar;
      while ((blockPos = this.config.beginOpenBlock.search(this.src)) !== -1) {
        this._parseBlock(blockPos, blocks);
      }
      codes = {};
      i = 0;
      while ((startPos = this.config.beginCode.search(this.src)) !== -1) {
        this._parseCode(startPos, codes, i++);
      }
      codeReturns = {};
      i = 0;
      while ((startPos = this.config.beginResultCode.search(this.src)) !== -1) {
        this._parseCodeReturn(startPos, codeReturns, i++);
      }
      replaces = [[/\r/g, " "], [/\n/g, "\\n\\\n"], [/\'/g, "\\\u0027"], [/(_~~\{\{~~\{\{~~~~_\d+_~~~~\}\}~~\}\}~~_)/g, "');\n\t " + wv + "( $1 );\n\t " + wv + "('"], [/(_~~\{\{~~\{\{~~_)/g, "');\n\t$1"], [/(_~~\}\}~~\}\}~~_)/g, "$1\n\t" + wv + "('"]];
      for (_i = 0, _len = replaces.length; _i < _len; _i++) {
        _ref = replaces[_i], s = _ref[0], r = _ref[1];
        this.src = this.src.replace(s, r);
      }
      for (k in codes) {
        v = codes[k];
        this.src = this.src.replace(this._codeId(k), v);
      }
      for (k2 in codeReturns) {
        v2 = codeReturns[k2];
        this.src = this.src.replace(this._codeReturnId(k2), v2);
      }
      renderSource = "var out = " + wv + ";\n\nwith(template) {\n\nwith(variables) {\n	" + wv + "('" + this.src + "');\n}\n\n}";
      this.src = null;
      if (this.logger.debugEnabled) {
        this.logger.debug("renderSource: " + renderSource);
      }
      render = new Function("template, " + wv + ", variables, parentTemplate", renderSource);
      template = new coffeePL.Template(this.config, blocks, render);
      return template;
    };

    return Parser;

  })();

}).call(this);
